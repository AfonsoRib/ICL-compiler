true
false
10000
10000.5
2+3
1.1+.8.6
2-3
1.1-.8.6
-3
1;2
45*9
45.0*.9.0
49/7
49.0/.7.0
20 = 20
20 = 1
40 != 20
40 != 40
98 < 6789
98 > 6789
19 <= 19
19 >= 19
(3)
(true)
(())
true && true
true && false
true || true
true || false
~true
~false
let x = 1 in x
let x = 1.0 in x
let x = true in x
let x = false in x
let x = () in x
let x = new 1 in x
let x = new 1.0 in x
let x = new true in x
let x = new false in x
let x = new () in x
let x : int = 1 in x
let x : float = 1.0 in x
let x : bool = true in x
let x : bool = false in x
let x : unit = () in x
let x : ref int = new 1 in x
let x : ref float = new 1.0 in x
let x : ref bool = new true in x
let x : ref bool = new false in x
let x = new 2 in !x
let x = new 2.0 in !x
let x = new 3 in x := 5
let x = new 3.0 in x := 5.0
if true then true else false end
if true then false else true end
if true then () else () end
if true then new 2 else new 5 end
if true then new 2.0 else new 5.0 end
if true then 1 else 2 end
if true then 1.0 else 2.0 end
if true then true else false end
if true then false else true end
print 10
println 10
let x = new 10 in (while !x > 0 do ((println !x) ; x := (!x - 1)) end)
let x = new 3 in ((x := (!x - 1)) ; !x)
(fun x : int -> x end)
(fun x : int -> x end)(2)
let f : (int, int -> int) = (fun x:int y:int -> (if (x>0) then (f(x-1,y)) else y end) end) in println (f(2,10))
let f : ((int -> int) -> int)  = (fun x : (int->int) -> (x(2)) end) in 1
(fun x:((int,int -> int) -> int  ) -> 2 end)
let x : (unit->unit) = (fun x:unit -> println(x) end) in x(())
println(println((fun x: (int,int -> int  ) -> 2 end)((fun x:int y:int -> (x+y) end))))
let x = 5 in let x = 10 in x
let x = 5 in let x = x + 1 in x
let f = (fun x:int -> x + 1 end) in let g = (fun y:int -> y * 2 end) in g(f(3))
let f = (fun x:int -> x + 1 end) in let g = (fun y:int -> y * 2 end) in let h = (fun z:int -> z - 1 end) in h(g(f(3)))
let apply = (fun f:(int -> int) x:int -> f(x) end) in let increment = (fun y:int -> y + 1 end) in apply(increment, 5)
let apply_twice = (fun f:(int -> int) x:int -> f(f(x)) end) in let double = (fun y:int -> y * 2 end) in apply_twice(double, 3)
let rec fact = (fun n:int -> if n = 0 then 1 else n * fact(n - 1) end) in fact(5)
let rec fib = (fun n:int -> if n <= 1 then n else fib(n - 1) + fib(n - 2) end) in fib(10)
if true then if false then 1 else 2 end else 3 end
if false then if true then 1 else 2 end else 3 end
let x = 1 in let y = 2 in let z = x + y in z
let x = 1 in let f = (fun y:int -> x + y end) in f(10)
let x = new 1 in !x := "wrong type"
let x = 1 / 0 in x
let f = (fun x:int -> x + 1 end) in f("string")
let x = true && (false || true) in x
let x = false || (true && false) in x
let x = new 0 in while !x < 10 do x := !x + 1 end
let x = new 0 in while !x < 10 do (println(!x); x := !x + 1) end
let x = 1 + 2 * 3 - 4 / 2 in x
let x = 1.5 + 2.5 * 3.5 - 4.5 / 2.5 in x
let x = new (new 1) in !(x)
let x = new (new true) in !(!x)
